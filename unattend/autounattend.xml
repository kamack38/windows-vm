<?xml version="1.0" encoding="utf-8"?>
<unattend xmlns="urn:schemas-microsoft-com:unattend" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State">
  <settings pass="offlineServicing"></settings>

  <!--
    For documentation on components:
    http://technet.microsoft.com/en-us/library/ff699038.aspx

    For general unattended documentation:
    https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/update-windows-settings-and-scripts-create-your-own-answer-file-sxs?view=windows-10
  -->
  <settings pass="windowsPE">
    <component name="Microsoft-Windows-International-Core-WinPE" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">

      <!--
        This hides the initial language/keyboard/etc dialog.
      -->
      <SetupUILanguage>
        <UILanguage>pl-PL</UILanguage>
      </SetupUILanguage>
      <InputLocale>0415:00000415</InputLocale>
      <SystemLocale>pl-PL</SystemLocale>
      <UILanguage>pl-PL</UILanguage>
      <UserLocale>pl-PL</UserLocale>

    </component>
    <component name="Microsoft-Windows-PnpCustomizationsWinPE" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">

      <!--
        This makes the VirtIO drivers available to Windows, assuming that
        the VirtIO driver disk is available as drive E:
      -->
      <DriverPaths>
        <PathAndCredentials wcm:action="add" wcm:keyValue="1">
          <Path>E:\NetKVM\w10\amd64\</Path>
        </PathAndCredentials>
        <PathAndCredentials wcm:action="add" wcm:keyValue="3">
          <Path>E:\viostor\w10\amd64\</Path>
        </PathAndCredentials>
      </DriverPaths>

    </component>
    <component name="Microsoft-Windows-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">

      <DiskConfiguration>
        <WillShowUI>OnError</WillShowUI>
        <Disk wcm:action="add">
          <CreatePartitions>
            <!-- System partition (ESP) -->
            <CreatePartition wcm:action="add">
              <Order>1</Order>
              <Type>EFI</Type>
              <Size>100</Size>
            </CreatePartition>
            <!-- Microsoft reserved partition (MSR) -->
            <CreatePartition wcm:action="add">
              <Order>2</Order>
              <Type>MSR</Type>
              <Size>16</Size>
            </CreatePartition>
            <!-- Windows partition -->
            <CreatePartition wcm:action="add">
              <Order>3</Order>
              <Type>Primary</Type>
              <Extend>true</Extend>
            </CreatePartition>
          </CreatePartitions>
          <ModifyPartitions>
            <!-- System partition (ESP) -->
            <ModifyPartition wcm:action="add">
              <Order>1</Order>
              <PartitionID>1</PartitionID>
              <Label>System</Label>
              <Format>FAT32</Format>
            </ModifyPartition>
            <!-- Windows partition -->
            <ModifyPartition wcm:action="add">
              <Order>2</Order>
              <PartitionID>3</PartitionID>
              <Label>Windows 10</Label>
              <Letter>C</Letter>
              <Format>NTFS</Format>
            </ModifyPartition>
          </ModifyPartitions>
          <DiskID>0</DiskID>
          <WillWipeDisk>true</WillWipeDisk>
        </Disk>
      </DiskConfiguration>

      <ImageInstall>
        <OSImage>
          <InstallTo>
            <DiskID>0</DiskID>
            <PartitionID>3</PartitionID>
          </InstallTo>
        </OSImage>
      </ImageInstall>

      <!--
        This accepts the EULA and installs a product key.
      -->
      <UserData>
        <ProductKey>
          <WillShowUI>OnError</WillShowUI>
          <Key>VK7JG-NPHTM-C97JM-9MPGT-3V66T</Key>
        </ProductKey>
        <FullName>VM Admin</FullName>
        <AcceptEula>true</AcceptEula>
      </UserData>

    </component>
  </settings>
  <settings pass="specialize">

    <component name="Microsoft-Windows-Shell-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
      <!--
        Set computer name to 'RDPWindows' (required by WinApps)
      -->
      <ComputerName>RDPWindows</ComputerName>
    </component>

    <component name="Microsoft-Windows-Deployment" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
      <RunSynchronous>
        <RunSynchronousCommand wcm:action="add">
          <Order>1</Order>
          <Path>powershell.exe -NoProfile -Command "$xml = [xml]::new(); $xml.Load('C:\Windows\Panther\unattend.xml'); $sb = [scriptblock]::Create( $xml.unattend.Extensions.ExtractScript ); Invoke-Command -ScriptBlock $sb -ArgumentList $xml;"</Path>
        </RunSynchronousCommand>
        <RunSynchronousCommand wcm:action="add">
          <Order>2</Order>
          <Path>powershell.exe -NoProfile -Command "Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\Specialize.ps1' -Raw | Invoke-Expression;"</Path>
        </RunSynchronousCommand>
        <RunSynchronousCommand wcm:action="add">
          <Order>3</Order>
          <Path>reg.exe load "HKU\DefaultUser" "C:\Users\Default\NTUSER.DAT"</Path>
        </RunSynchronousCommand>
        <RunSynchronousCommand wcm:action="add">
          <Order>4</Order>
          <Path>powershell.exe -NoProfile -Command "Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\DefaultUser.ps1' -Raw | Invoke-Expression;"</Path>
        </RunSynchronousCommand>
        <RunSynchronousCommand wcm:action="add">
          <Order>5</Order>
          <Path>reg.exe unload "HKU\DefaultUser"</Path>
        </RunSynchronousCommand>
      </RunSynchronous>
    </component>
  </settings>

  <settings pass="auditSystem"></settings>
  <settings pass="auditUser"></settings>

  <settings pass="oobeSystem">
    <component name="Microsoft-Windows-International-Core" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
      <!--
        Set system locale
      -->
      <InputLocale>0415:00000415</InputLocale>
      <SystemLocale>pl-PL</SystemLocale>
      <UILanguage>pl-PL</UILanguage>
      <UserLocale>pl-PL</UserLocale>
    </component>

    <!--
      Create user accounts (User: Admin, Password: 1234)
    -->
    <component name="Microsoft-Windows-Shell-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
      <UserAccounts>
        <LocalAccounts>
          <LocalAccount wcm:action="add">
            <Name>Admin</Name>
            <Group>Administrators</Group>
            <Password>
              <Value>1234</Value>
              <PlainText>true</PlainText>
            </Password>
          </LocalAccount>
        </LocalAccounts>
      </UserAccounts>
      <AutoLogon>
        <Username>Admin</Username>
        <Enabled>true</Enabled>
        <LogonCount>1</LogonCount>
        <Password>
          <Value>1234</Value>
          <PlainText>true</PlainText>
        </Password>
      </AutoLogon>
      <OOBE>
        <ProtectYourPC>3</ProtectYourPC>
        <HideEULAPage>true</HideEULAPage>
        <HideWirelessSetupInOOBE>true</HideWirelessSetupInOOBE>
        <HideOnlineAccountScreens>false</HideOnlineAccountScreens>
      </OOBE>
      <FirstLogonCommands>
        <SynchronousCommand wcm:action="add">
          <Order>1</Order>
          <CommandLine>powershell.exe -NoProfile -Command "Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\FirstLogon.ps1' -Raw | Invoke-Expression;"</CommandLine>
        </SynchronousCommand>
      </FirstLogonCommands>
    </component>
  </settings>

  <Extensions xmlns="https://schneegans.de/windows/unattend-generator/">
    <ExtractScript>
      param(
      [xml] $Document
      );

      foreach( $file in $Document.unattend.Extensions.File ) {
      $path = [System.Environment]::ExpandEnvironmentVariables(
      $file.GetAttribute( 'path' )
      );
      mkdir -Path( $path | Split-Path -Parent ) -ErrorAction 'SilentlyContinue';
      $content = $file.InnerText.Trim();
      if( $file.GetAttribute( 'transformation' ) -ieq 'Base64' ) {
      [System.IO.File]::WriteAllBytes( $path, [System.Convert]::FromBase64String( $content ) );
      } else {
      $encoding = switch( [System.IO.Path]::GetExtension( $path ) ) {
      { $_ -in '.ps1', '.xml' } { [System.Text.Encoding]::UTF8; }
      { $_ -in '.reg', '.vbs', '.js' } { [System.Text.UnicodeEncoding]::new( $false, $true ); }
      default { [System.Text.Encoding]::Default; }
      };
      [System.IO.File]::WriteAllBytes( $path, ( $encoding.GetPreamble() + $encoding.GetBytes( $content ) ) );
      }
      }
    </ExtractScript>


    <!--
      Remove unnecessary packages (bloatware)
    -->
    <File path="C:\Windows\Setup\Scripts\RemovePackages.ps1">
      $selectors = @(
      'Microsoft.Microsoft3DViewer';
      'Microsoft.BingSearch';
      'Microsoft.WindowsCalculator';
      'Microsoft.WindowsCamera';
      'Clipchamp.Clipchamp';
      'Microsoft.WindowsAlarms';
      'Microsoft.549981C3F5F10';
      'Microsoft.Windows.DevHome';
      'MicrosoftCorporationII.MicrosoftFamily';
      'Microsoft.WindowsFeedbackHub';
      'Microsoft.GetHelp';
      'Microsoft.Getstarted';
      'microsoft.windowscommunicationsapps';
      'Microsoft.WindowsMaps';
      'Microsoft.MixedReality.Portal';
      'Microsoft.BingNews';
      'Microsoft.WindowsNotepad';
      'Microsoft.MicrosoftOfficeHub';
      'Microsoft.Office.OneNote';
      'Microsoft.OutlookForWindows';
      'Microsoft.Paint';
      'Microsoft.MSPaint';
      'Microsoft.People';
      'Microsoft.Windows.Photos';
      'Microsoft.PowerAutomateDesktop';
      'MicrosoftCorporationII.QuickAssist';
      'Microsoft.SkypeApp';
      'Microsoft.ScreenSketch';
      'Microsoft.MicrosoftSolitaireCollection';
      'Microsoft.MicrosoftStickyNotes';
      'MicrosoftTeams';
      'MSTeams';
      'Microsoft.Todos';
      'Microsoft.WindowsSoundRecorder';
      'Microsoft.Wallet';
      'Microsoft.BingWeather';
      'Microsoft.WindowsTerminal';
      'Microsoft.Xbox.TCUI';
      'Microsoft.XboxApp';
      'Microsoft.XboxGameOverlay';
      'Microsoft.XboxGamingOverlay';
      'Microsoft.XboxIdentityProvider';
      'Microsoft.XboxSpeechToTextOverlay';
      'Microsoft.GamingApp';
      'Microsoft.YourPhone';
      'Microsoft.ZuneMusic';
      'Microsoft.ZuneVideo';
      );
      $getCommand = {
      Get-AppxProvisionedPackage -Online;
      };
      $filterCommand = {
      $_.DisplayName -eq $selector;
      };
      $removeCommand = {
      [CmdletBinding()]
      param(
      [Parameter( Mandatory, ValueFromPipeline )]
      $InputObject
      );
      process {
      $InputObject | Remove-AppxProvisionedPackage -AllUsers -Online -ErrorAction 'Continue';
      }
      };
      $type = 'Package';
      $logfile = 'C:\Windows\Setup\Scripts\RemovePackages.log';
        &amp; {
      $installed = &amp; $getCommand;
      foreach( $selector in $selectors ) {
      $result = [ordered] @{
      Selector = $selector;
      };
      $found = $installed | Where-Object -FilterScript $filterCommand;
      if( $found ) {
      $result.Output = $found | &amp; $removeCommand;
      if( $? ) {
      $result.Message = "$type removed.";
      } else {
      $result.Message = "$type not removed.";
      $result.Error = $Error[0];
      }
      } else {
      $result.Message = "$type not installed.";
      }
      $result | ConvertTo-Json -Depth 3 -Compress;
      }
      } *&gt;&amp;1 &gt;&gt; $logfile;
    </File>

    <!--
      Remove unused capabilities
    -->
    <File path="C:\Windows\Setup\Scripts\RemoveCapabilities.ps1" transformation="Text">
      $selectors = @(
      'Print.Fax.Scan';
      'Language.Handwriting';
      'Browser.InternetExplorer';
      'MathRecognizer';
      'OneCoreUAP.OneSync';
      'Microsoft.Windows.MSPaint';
      'Microsoft.Windows.PowerShell.ISE';
      'App.Support.QuickAssist';
      'Microsoft.Windows.SnippingTool';
      'Language.Speech';
      'Language.TextToSpeech';
      'App.StepsRecorder';
      'Hello.Face.18967';
      'Hello.Face.Migration.18967';
      'Hello.Face.20134';
      'Media.WindowsMediaPlayer';
      'Microsoft.Windows.WordPad';
      );
      $getCommand = {
      Get-WindowsCapability -Online | Where-Object -Property 'State' -NotIn -Value @(
      'NotPresent';
      'Removed';
      );
      };
      $filterCommand = {
      ($_.Name -split '~')[0] -eq $selector;
      };
      $removeCommand = {
      [CmdletBinding()]
      param(
      [Parameter( Mandatory, ValueFromPipeline )]
      $InputObject
      );
      process {
      $InputObject | Remove-WindowsCapability -Online -ErrorAction 'Continue';
      }
      };
      $type = 'Capability';
      $logfile = 'C:\Windows\Setup\Scripts\RemoveCapabilities.log';
        &amp; {
      $installed = &amp; $getCommand;
      foreach( $selector in $selectors ) {
      $result = [ordered] @{
      Selector = $selector;
      };
      $found = $installed | Where-Object -FilterScript $filterCommand;
      if( $found ) {
      $result.Output = $found | &amp; $removeCommand;
      if( $? ) {
      $result.Message = "$type removed.";
      } else {
      $result.Message = "$type not removed.";
      $result.Error = $Error[0];
      }
      } else {
      $result.Message = "$type not installed.";
      }
      $result | ConvertTo-Json -Depth 3 -Compress;
      }
      } *&gt;&amp;1 &gt;&gt; $logfile;
    </File>

    <!--
      Remove unused features (Remote Desktop Client won't be used on Windows [I think so])
    -->
    <File path="C:\Windows\Setup\Scripts\RemoveFeatures.ps1" transformation="Text">
      $selectors = @(
      'MediaPlayback';
      'MicrosoftWindowsPowerShellV2Root';
      'Microsoft-RemoteDesktopConnection';
      'Recall';
      'Microsoft-SnippingTool';
      );
      $getCommand = {
      Get-WindowsOptionalFeature -Online | Where-Object -Property 'State' -NotIn -Value @(
      'Disabled';
      'DisabledWithPayloadRemoved';
      );
      };
      $filterCommand = {
      $_.FeatureName -eq $selector;
      };
      $removeCommand = {
      [CmdletBinding()]
      param(
      [Parameter( Mandatory, ValueFromPipeline )]
      $InputObject
      );
      process {
      $InputObject | Disable-WindowsOptionalFeature -Online -Remove -NoRestart -ErrorAction 'Continue';
      }
      };
      $type = 'Feature';
      $logfile = 'C:\Windows\Setup\Scripts\RemoveFeatures.log';
        &amp; {
      $installed = &amp; $getCommand;
      foreach( $selector in $selectors ) {
      $result = [ordered] @{
      Selector = $selector;
      };
      $found = $installed | Where-Object -FilterScript $filterCommand;
      if( $found ) {
      $result.Output = $found | &amp; $removeCommand;
      if( $? ) {
      $result.Message = "$type removed.";
      } else {
      $result.Message = "$type not removed.";
      $result.Error = $Error[0];
      }
      } else {
      $result.Message = "$type not installed.";
      }
      $result | ConvertTo-Json -Depth 3 -Compress;
      }
      } *&gt;&amp;1 &gt;&gt; $logfile;
    </File>


    <!--
      Install VirtIoGuestTools (don't have to run virtio-win-gt-x64.exe and virtio-win-guest-tools.exe)
    -->
    <File path="C:\Windows\Setup\Scripts\VirtIoGuestTools.ps1">
        &amp; {
      foreach( $letter in 'DEFGHIJKLMNOPQRSTUVWXYZ'.ToCharArray() ) {
      $exe = "${letter}:\virtio-win-guest-tools.exe";
      if( Test-Path -LiteralPath $exe ) {
      Start-Process -FilePath $exe -ArgumentList '/passive', '/norestart' -Wait;
      return;
      }
      }
      'VirtIO Guest Tools image (virtio-win-*.iso) is not attached to this VM.';
      } *&gt;&amp;1 &gt;&gt; 'C:\Windows\Setup\Scripts\VirtIoGuestTools.log';
    </File>
    <File path="C:\Windows\Setup\Scripts\SetStartPins.ps1" transformation="Text">
      $json = '{"pinnedList":[]}';
      if( [System.Environment]::OSVersion.Version.Build -lt 20000 ) {
      return;
      }
      $key = 'Registry::HKLM\SOFTWARE\Microsoft\PolicyManager\current\device\Start';
      New-Item -Path $key -ItemType 'Directory' -ErrorAction 'SilentlyContinue';
      Set-ItemProperty -LiteralPath $key -Name 'ConfigureStartPins' -Value $json -Type 'String';
    </File>

    <!--
      Set system color theme (dark theme with an accent colour)
    -->
    <File path="C:\Windows\Setup\Scripts\SetColorTheme.ps1" transformation="Text">
      $lightThemeSystem = 0;
      $lightThemeApps = 0;
      $accentColorOnStart = 1;
      $enableTransparency = 1;
      $htmlAccentColor = '#0078D4';
        &amp; {
      $params = @{
      LiteralPath = 'Registry::HKCU\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize';
      Force = $true;
      Type = 'DWord';
      };
      Set-ItemProperty @params -Name 'SystemUsesLightTheme' -Value $lightThemeSystem;
      Set-ItemProperty @params -Name 'AppsUseLightTheme' -Value $lightThemeApps;
      Set-ItemProperty @params -Name 'ColorPrevalence' -Value $accentColorOnStart;
      Set-ItemProperty @params -Name 'EnableTransparency' -Value $enableTransparency;
      };
        &amp; {
      Add-Type -AssemblyName 'System.Drawing';
      $accentColor = [System.Drawing.ColorTranslator]::FromHtml( $htmlAccentColor );

      function ConvertTo-DWord {
      param(
      [System.Drawing.Color]
      $Color
      );

      [byte[]] $bytes = @(
      $Color.R;
      $Color.G;
      $Color.B;
      $Color.A;
      );
      return [System.BitConverter]::ToUInt32( $bytes, 0); 
      }

      $startColor = [System.Drawing.Color]::FromArgb( 0xD2, $accentColor );
      Set-ItemProperty -LiteralPath 'Registry::HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Accent' -Name 'StartColorMenu' -Value( ConvertTo-DWord -Color $accentColor ) -Type 'DWord' -Force;
      Set-ItemProperty -LiteralPath 'Registry::HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Accent' -Name 'AccentColorMenu' -Value( ConvertTo-DWord -Color $accentColor ) -Type 'DWord' -Force;
      Set-ItemProperty -LiteralPath 'Registry::HKCU\Software\Microsoft\Windows\DWM' -Name 'AccentColor' -Value( ConvertTo-DWord -Color $accentColor ) -Type 'DWord' -Force;
      $params = @{
      LiteralPath = 'Registry::HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Accent';
      Name = 'AccentPalette';
      };
      $palette = Get-ItemPropertyValue @params;
      $index = 20;
      $palette[ $index++ ] = $accentColor.R;
      $palette[ $index++ ] = $accentColor.G;
      $palette[ $index++ ] = $accentColor.B;
      $palette[ $index++ ] = $accentColor.A;
      Set-ItemProperty @params -Value $palette -Type 'Binary' -Force;
      };
    </File>


    <!--
      Winapps tweak - cleans up the net profile
    -->
    <File path="C:\Windows\Setup\Scripts\NetProfileCleanup.ps1">
      # Get the current network profile name
      $currentProfile = (Get-NetConnectionProfile).Name

      # Get all profiles from the registry
      $profilesKey = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\NetworkList\Profiles"
      $profiles = Get-ChildItem -Path $profilesKey

      foreach ($profile in $profiles) {
      $profilePath = "$profilesKey\$($profile.PSChildName)"
      $profileName = (Get-ItemProperty -Path $profilePath).ProfileName

      # Remove profiles that don't match the current one
      if ($profileName -ne $currentProfile) {
      Remove-Item -Path $profilePath -Recurse
      Write-Host "Deleted profile: $profileName"
      }
      }

      # Change the current profile name to "WinApps"
      $profiles = Get-ChildItem -Path $profilesKey
      foreach ($profile in $profiles) {
      $profilePath = "$profilesKey\$($profile.PSChildName)"
      $profileName = (Get-ItemProperty -Path $profilePath).ProfileName

      if ($profileName -eq $currentProfile) {
      # Update the profile name
      Set-ItemProperty -Path $profilePath -Name "ProfileName" -Value "WinApps"
      Write-Host "Renamed profile to: WinApps"
      }
      }
    </File>

    <!--
      Winapps tweak - some RDP tweaks
    -->
    <File path="C:\Windows\Setup\Scripts\RDPApps.reg">
      Windows Registry Editor Version 5.00

      ; Disable RemoteApp allowlist so all applications can be used in Remote Desktop sessions
      [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Terminal Server\TSAppAllowList]
      "fDisabledAllowList"=dword:00000001

      ; Allow unlisted programs to be run in Remote Desktop sessions
      [HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services]
      "fAllowUnlistedRemotePrograms"=dword:00000001

      ; Disable automatic administrator logon at startup
      [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon]
      "AutoAdminLogon"="0"

      ; Always use the server's keyboard layout
      [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]
      "IgnoreRemoteKeyboardLayout"=dword:00000001

      ; Disable "Do you want your PC to be discoverable" prompt after each host system reboot
      [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Network\NewNetworkWindowOff]
    </File>

    <File path="C:\Windows\Setup\Scripts\Specialize.ps1" transformation="Text">
      $scripts = @(
      {
      reg.exe add "HKLM\SYSTEM\Setup\MoSetup" /v AllowUpgradesWithUnsupportedTPMOrCPU /t REG_DWORD /d 1 /f;
      };
      {
      Remove-Item -LiteralPath 'Registry::HKLM\Software\Microsoft\WindowsUpdate\Orchestrator\UScheduler_Oobe\DevHomeUpdate' -Force -ErrorAction 'SilentlyContinue';
      };
      {
      Remove-Item -LiteralPath 'C:\Users\Default\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\OneDrive.lnk', 'C:\Windows\System32\OneDriveSetup.exe', 'C:\Windows\SysWOW64\OneDriveSetup.exe' -ErrorAction 'Continue';
      };
      {
      Remove-Item -LiteralPath 'Registry::HKLM\Software\Microsoft\WindowsUpdate\Orchestrator\UScheduler_Oobe\OutlookUpdate' -Force -ErrorAction 'SilentlyContinue';
      };
      {
      reg.exe add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Communications" /v ConfigureChatAutoInstall /t REG_DWORD /d 0 /f;
      };
      {
      Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\RemovePackages.ps1' -Raw | Invoke-Expression;
      };
      {
      Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\RemoveCapabilities.ps1' -Raw | Invoke-Expression;
      };
      {
      Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\RemoveFeatures.ps1' -Raw | Invoke-Expression;
      };
      {
      net.exe accounts /maxpwage:UNLIMITED;
      };
      {
      Set-ExecutionPolicy -Scope 'LocalMachine' -ExecutionPolicy 'RemoteSigned' -Force;
      };
      {
      reg.exe add "HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Power" /v HiberbootEnabled /t REG_DWORD /d 0 /f;
      };
      {
      reg.exe add "HKLM\SOFTWARE\Policies\Microsoft\Dsh" /v AllowNewsAndInterests /t REG_DWORD /d 0 /f;
      };
      {
      reg.exe add "HKLM\SOFTWARE\Policies\Microsoft\Edge" /v HideFirstRunExperience /t REG_DWORD /d 1 /f;
      };
      {
      reg.exe add "HKLM\SOFTWARE\Policies\Microsoft\Dsh" /v AllowNewsAndInterests /t REG_DWORD /d 0 /f;
      };
      {
      Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\SetStartPins.ps1' -Raw | Invoke-Expression;
      };
      );

        &amp; {
      [float] $complete = 0;
      [float] $increment = 100 / $scripts.Count;
      foreach( $script in $scripts ) {
      Write-Progress -Activity 'Running scripts to customize your Windows installation. Do not close this window.' -PercentComplete $complete;
        &amp; $script;
      $complete += $increment;
      }
      } *&gt;&amp;1 &gt;&gt; "C:\Windows\Setup\Scripts\Specialize.log";
    </File>

    <File path="C:\Windows\Setup\Scripts\UserOnce.ps1" transformation="Text">
      $scripts = @(
      {
      Get-AppxPackage -Name 'Microsoft.Windows.Ai.Copilot.Provider' | Remove-AppxPackage;
      };
      {
      Set-ItemProperty -LiteralPath 'Registry::HKCU\Software\Microsoft\Windows\CurrentVersion\Search' -Name 'SearchboxTaskbarMode' -Type 'DWord' -Value 0;
      };
      {
      Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\SetColorTheme.ps1' -Raw | Invoke-Expression;
      };
      {
      Get-Process -Name 'explorer' -ErrorAction 'SilentlyContinue' | Where-Object -FilterScript {
      $_.SessionId -eq ( Get-Process -Id $PID ).SessionId;
      } | Stop-Process -Force;
      };
      );

        &amp; {
      [float] $complete = 0;
      [float] $increment = 100 / $scripts.Count;
      foreach( $script in $scripts ) {
      Write-Progress -Activity 'Running scripts to configure this user account. Do not close this window.' -PercentComplete $complete;
        &amp; $script;
      $complete += $increment;
      }
      } *&gt;&amp;1 &gt;&gt; "$env:TEMP\UserOnce.log";
    </File>
    <File path="C:\Windows\Setup\Scripts\DefaultUser.ps1" transformation="Text">
      $scripts = @(
      {
      reg.exe add "HKU\DefaultUser\Software\Policies\Microsoft\Windows\WindowsCopilot" /v TurnOffWindowsCopilot /t REG_DWORD /d 1 /f;
      };
      {
      reg.exe add "HKU\DefaultUser\Software\Microsoft\Notepad" /v ShowStoreBanner /t REG_DWORD /d 0 /f;
      };
      {
      Remove-ItemProperty -LiteralPath 'Registry::HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Run' -Name 'OneDriveSetup' -Force -ErrorAction 'Continue';
      };
      {
      reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "HideFileExt" /t REG_DWORD /d 0 /f;
      };
      {
      reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "Hidden" /t REG_DWORD /d 1 /f;
      };
      {
      reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ShowSuperHidden" /t REG_DWORD /d 1 /f;
      };
      {
      reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v ShowTaskViewButton /t REG_DWORD /d 0 /f;
      };
      {
      $params = @{
      LiteralPath = 'Registry::HKU\DefaultUser\Control Panel\Mouse';
      Type = 'String';
      Value = 0;
      Force = $true;
      };
      Set-ItemProperty @params -Name 'MouseSpeed';
      Set-ItemProperty @params -Name 'MouseThreshold1';
      Set-ItemProperty @params -Name 'MouseThreshold2';
      };
      {
      reg.exe add "HKU\DefaultUser\Software\Policies\Microsoft\Windows\Explorer" /v DisableSearchBoxSuggestions /t REG_DWORD /d 1 /f;
      };
      {
      reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\DWM" /v ColorPrevalence /t REG_DWORD /d 1 /f;
      };
      {
      reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\RunOnce" /v "UnattendedSetup" /t REG_SZ /d "powershell.exe -NoProfile -Command \""Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\UserOnce.ps1' -Raw | Invoke-Expression;\""" /f;
      };
      );

        &amp; {
      [float] $complete = 0;
      [float] $increment = 100 / $scripts.Count;
      foreach( $script in $scripts ) {
      Write-Progress -Activity 'Running scripts to modify the default user&#x2019;&#x2019;s registry hive. Do not close this window.' -PercentComplete $complete;
        &amp; $script;
      $complete += $increment;
      }
      } *&gt;&amp;1 &gt;&gt; "C:\Windows\Setup\Scripts\DefaultUser.log";
    </File>
    <File path="C:\Windows\Setup\Scripts\FirstLogon.ps1" transformation="Text">
      $scripts = @(
      {
      Set-ItemProperty -LiteralPath 'Registry::HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon' -Name 'AutoLogonCount' -Type 'DWord' -Force -Value 0;
      };
      {
      Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\VirtIoGuestTools.ps1' -Raw | Invoke-Expression;
      };
      {
      cmd.exe /c "rmdir C:\Windows.old";
      };
      {
      Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\NetProfileCleanup.ps1' -Raw | Invoke-Expression;
      };
      {
      reg.exe import "C:\Windows\Setup\Scripts\RDPApps.reg";
      };
      );

        &amp; {
      [float] $complete = 0;
      [float] $increment = 100 / $scripts.Count;
      foreach( $script in $scripts ) {
      Write-Progress -Activity 'Running scripts to finalize your Windows installation. Do not close this window.' -PercentComplete $complete;
        &amp; $script;
      $complete += $increment;
      }
      } *&gt;&amp;1 &gt;&gt; "C:\Windows\Setup\Scripts\FirstLogon.log";
    </File>
  </Extensions>
</unattend>
